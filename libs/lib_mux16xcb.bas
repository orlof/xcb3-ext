SYSTEM INTERRUPT OFF        'THIS IS MANDATORY

CONST BOTTOM_MARGIN = 21
CONST ADVANCE = 9           'USE INTERRUPT IF NEXT SPRITE REUSE IS MORE THAN n LINES BELOW

'USE THIS FROM MAIN PROGRAM TO COMMIT CHANGES IN PUBLIC SPRITE REGISTERS
DECLARE SUB SprUpdate() STATIC SHARED

'THESE ARE PUBLIC SPRITE REGISTERS THAT CAN BE CHANGED IN MAIN PROGRAM
DIM SHARED SprY(16) AS BYTE
DIM SHARED SprX(16) AS BYTE
DIM SHARED SprCol(16) AS BYTE
DIM SHARED SprShape(16) AS BYTE

'INTERNAL SPRITE DATA
DIM _SprNr0 AS BYTE FAST
DIM _SprNr1 AS BYTE FAST

DIM _SprIdx(16) AS BYTE FAST
DIM _SprY(16) AS BYTE
DIM _SprX(16) AS BYTE
DIM _SprCol(16) AS BYTE
DIM _SprShape(16) AS BYTE
DIM _SprScanLine AS WORD
DIM _SprUpdate AS BYTE

'INITIALIZE SPRITE MULTIPLEXER
FOR _SprNr0 = 0 TO 15
    IF _SprNr0 < 8 THEN SPRITE _SprNr0 ON
    _SprIdx(_SprNr0) = _SprNr0
    SprY(_SprNr0) = 255
NEXT _SprNr0

ON RASTER 256 GOSUB Zone0
RASTER INTERRUPT ON
CALL SprUpdate()

GOTO THE_END

'RASTER INTERRUPT ROUTINE THAT REUSES ONE HW SPRITE
ZoneN:
    _SprNr1 = _SprNr0 + 8
    BORDER _SprNr1

    'BACK TO SORTING INTERRUPT IF ALL SPRITES ALREADY PROCESSED
    IF _SprY(_SprNr1) = 255 THEN GOTO ZoneNDone

    'WAIT FOR SCANLINE TO REUSE SPRITE (NEEDED IF TRIGGERED BY DIRECT GOTO INSTEAD OF INTERRUPT)
    _SprScanLine = CWORD(_SprY(_SprNr0)) + BOTTOM_MARGIN
    DO WHILE SCAN() < _SprScanLine
    LOOP

    'REUSE HW SPRITE
    SPRITE _SprNr0 AT SHL(CWORD(_SprX(_SprNr1)),1), _SprY(_SprNr1) SHAPE _SprShape(_SprNr1) COLOR _SprCol(_SprNr1)

    'BACK TO SORTING IF LAST REUSED SPRITE
    IF _SprNr0 = 7 THEN GOTO ZoneNDone

    'ADVANCE TO NEXT SPRITE REUSE
    _SprNr0 = _SprNr0 + 1

    'CHECK IF NEXT SPRITE REUSE IS SO CLOSE THAT IT NEEDS TO BE DONE IMMEDIATELY
    _SprScanLine = _SprY(_SprNr0) + BOTTOM_MARGIN
    IF SCAN() + ADVANCE >= _SprScanLine THEN GOTO ZoneN

    'IF THERE IS TIME, SCHEDULE INTERRUPT TO HANDLE NEXT SPRITE REUSE
    ON RASTER _SprScanLine GOSUB ZoneN

    BORDER 0
    RETURN

ZoneNDone:
    'IF WE ARE ALREADY LATE FROM SORTING INTERRUPT, GO THERE DIRECTLY
    IF SCAN() > 250 THEN GOTO Zone0

    'IF THERE IS TIME, SCHEDULE SORTING INTERRUPT
    ON RASTER 256 GOSUB Zone0

    BORDER 0
    RETURN

'THIS IS THE ONCE PER FRAME SORTING INTERRUPT THAT ALSO COPIES PUBLIC REGISTERS TO INTERNAL SPRITE DATA
Zone0:
    BORDER 2

    'IF MAIN PROGRAM WANTS TO COMMIT THE CHANGES IN PUBLIC SPRITE REGISTERS, DO IT NOW
    IF _SprUpdate THEN
        _SprUpdate = FALSE

        'THIS IS THE SORTING ALGORITHM
        FOR _SprNr0 = 0 TO 14 'TODO 14
            IF SprY(_SprIdx(_SprNr0)) > SprY(_SprIdx(_SprNr0 + 1)) THEN
                _SprNr1 = _SprNr0

                DO
                    SWAP _SprIdx(_SprNr1), _SprIdx(_SprNr1 + 1)
                    IF _SprNr1 = 0 THEN EXIT DO
                    _SprNr1 = _SprNr1 - 1
                LOOP UNTIL SprY(_SprIdx(_SprNr1 + 1)) >= SprY(_SprIdx(_SprNr1))
            END IF
        NEXT _SprNr0

        'COPY PUBLIC SPRITE REGISTERS TO INTERNAL SPRITE DATA IN SORTED ORDER
        FOR _SprNr0 = 0 TO 15 'TODO 15
            _SprNr1 = _SprIdx(_SprNr0)
            _SprY(_SprNr0) = SprY(_SprNr1)
            _SprX(_SprNr0) = SprX(_SprNr1)
            _SprCol(_SprNr0) = SprCol(_SprNr1)
            _SprShape(_SprNr0) = SprShape(_SprNr1)
        NEXT _SprNr0
    END IF

    'ASSIGN 8 HW SPRITES TO 8 FIRST SPRITES IN INTERNAL SPRITE DATA
    FOR _SprNr0 = 0 TO 7
        SPRITE _SprNr0 AT SHL(CWORD(_SprX(_SprNr0)),1), _SprY(_SprNr0) SHAPE _SprShape(_SprNr0) COLOR _SprCol(_SprNr0)
    NEXT _SprNr0

    'INITIALIZE SPRITE REUSE COUNTER
    _SprNr0 = 0

    'CHECK IF NEXT SPRITE REUSE IS SO CLOSE THAT IT NEEDS TO BE DONE IMMEDIATELY
    _SprScanLine = _SprY(0) + BOTTOM_MARGIN
    IF SCAN() < 256 THEN
        IF (SCAN() + ADVANCE) >= _SprScanLine THEN GOTO ZoneN
    END IF

    'IF THERE IS TIME, SCHEDULE INTERRUPT TO HANDLE FIRST SPRITE REUSE
    ON RASTER _SprScanLine GOSUB ZoneN

    BORDER 0
    RETURN

THE_END:

SUB SprUpdate() STATIC SHARED
    _SprUpdate = TRUE
    DO WHILE _SprUpdate     'WAIT FOR INTERRUPT TO PROCESS PUBLIC SPRITE REGISTERS
    LOOP
END SUB